{"version":3,"sources":["webpack:///./src/components/getimages.js","webpack:///./src/pages/index.js"],"names":["GetImages","data","images","edges","map","image","alt","node","name","key","childImageSharp","fluid","src","style","margin","IndexPage","title","to"],"mappings":"mLA2CeA,EAvCG,WAChB,IAAMC,EAAI,OAwBV,OACE,6BACGA,EAAKC,OAAOC,MAAMC,IAAI,SAAAC,GAAK,OAC1B,kBAAC,IAAD,CACEC,IAAKD,EAAME,KAAKC,KAChBC,IAAKJ,EAAME,KAAKG,gBAAgBC,MAAMC,IACtCD,MAAON,EAAME,KAAKG,gBAAgBC,MAClCE,MAAO,CAAEC,OAAQ,mBCjBZC,UAZG,kBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,SACX,yDACA,sEACA,6BACE,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAMC,GAAG,YAAT,mB","file":"component---src-pages-index-js-af457e7b8631ff7fb2b9.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst GetImages = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      images: allFile(\n        filter: {\n          extension: { regex: \"/(png)/\" }\n          sourceInstanceName: { eq: \"images\" }\n        }\n      ) {\n        edges {\n          node {\n            relativeDirectory\n            name\n            relativePath\n            childImageSharp {\n              fluid(maxWidth: 200, quality: 90) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div>\n      {data.images.edges.map(image => (\n        <Img\n          alt={image.node.name}\n          key={image.node.childImageSharp.fluid.src}\n          fluid={image.node.childImageSharp.fluid}\n          style={{ margin: \"20px 20px\" }}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default GetImages\n\n/*\nProject.propTypes = {\n  data: PropTypes.shape({\n    images: PropTypes.object.isRequired,\n  }).isRequired,\n}\n\nexport const data = graphql`\n  query {\n    images: allFile(\n      filter: {\n        extension: { regex: \"/(png)/\" }\n        sourceInstanceName: { eq: \"images\" }\n      }\n    ) {\n      edges {\n        node {\n          relativeDirectory\n          name\n          relativePath\n        }\n      }\n    }\n  }\n`\n\n*/\n\n/*\nconst GetImages = ({\n  pageContext: { slug, prev, next },\n  data: { project: postNode, images },\n}) => {\n  return (\n    <div>\n      {images.nodes.map(image => (\n        <Img\n          alt={image.name}\n          key={image.childImageSharp.fluid.src}\n          fluid={image.childImageSharp.fluid}\n          style={{ margin: \"3rem 0\" }}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default GetImages\n\nexport const query = graphql`\n  query allFile {\n    images: allFile(\n      filter: { absolutePath: { regex: \"/src/images\" } \n      }\n    ) {\n      nodes {\n        name\n        childImageSharp {\n          fluid(maxWidth: 600) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  }\n`\n*/\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport GetImages from \"../components/getimages\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <h1>Some Images in PNG format</h1>\n    <p>This is an image gallery made in Gatsby</p>\n    <div>\n      <GetImages />\n    </div>\n    <Link to=\"/page-2/\">Go to page 2</Link>\n  </Layout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}